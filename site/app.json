[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\n\n\nlapply(list.files(\"source\", full.names = TRUE), source)\n\nui <- page_sidebar(\n  title = \"Power and Sample Size\",\n  sidebar = sidebar(\n    selectInput(\"tool\", \"Choose a function:\", choices = c(\n      \"Test 1 Mean\" = \"one_mean_size\",\n      \"Compare 2 Means\" = \"two_mean_size\",\n      \"Compare k Means\" = \"k_mean_size\",\n      \"Test 1 Proportion\" = \"one_prop_size\",\n      \"Compare 2 Proportion\" = \"two_prop_size\",\n      \"Compare Paired Proportion\" = \"pair_prop_size\",\n      \"Compare k Proportion\" = \"k_prop_size\",\n      \"Test Time-To-Event Data\" = \"coxph_size\",\n      \"Test Odds Ratio\" = \"or_size\",\n      \"SCCS, Alt-2\" = \"sccs_size\",\n      \"One Normal\" = \"one_norm_size\",\n      \"One Binomial\" = \"one_bino_size\"\n    )),\n    uiOutput(\"param_ui\")\n  ),\n  uiOutput(\"main_ui\")\n)\n\nserver <- function(input, output, session) {\n\n  output$param_ui <- renderUI({\n    switch(input$tool,\n           \"one_mean_size\" = param_ui_one_mean_size(),\n           \"two_mean_size\" = param_ui_two_mean_size(),\n           \"k_mean_size\" = param_ui_k_mean_size(),\n           \"one_prop_size\" = param_ui_one_prop_size(),\n           \"two_prop_size\" = param_ui_two_prop_size(),\n           \"pair_prop_size\" = param_ui_pair_prop_size(),\n           \"k_prop_size\" = param_ui_k_prop_size(),\n           \"coxph_size\" = param_ui_coxph_size(),\n           \"or_size\" = param_ui_or_size(),\n           \"sccs_size\" = param_ui_sccs_size(),\n           \"one_norm_size\" = param_ui_one_norm_size(),\n           \"one_bino_size\" = param_ui_one_bino_size()\n    )\n  })\n\n  output$main_ui <- renderUI({\n    switch(input$tool,\n           \"one_mean_size\" = main_ui_one_mean_size(input$test_type),\n           \"two_mean_size\" = main_ui_two_mean_size(input$test_type),\n           \"k_mean_size\" = main_ui_k_mean_size(input$test_type),\n           \"one_prop_size\" = main_ui_one_prop_size(input$test_type),\n           \"two_prop_size\" = main_ui_two_prop_size(input$test_type),\n           \"pair_prop_size\" = main_ui_pair_prop_size(input$test_type),\n           \"k_prop_size\" = main_ui_k_prop_size(),\n           \"coxph_size\" = main_ui_coxph_size(input$test_type),\n           \"or_size\" = main_ui_or_size(input$test_type),\n           \"sccs_size\" = main_ui_sccs_size(),\n           \"one_norm_size\" = main_ui_one_norm_size(),\n           \"one_bino_size\" = main_ui_one_bino_size()\n\n    )\n  })\n\n  output$result <- renderText({\n    res <- switch(input$tool,\n                  \"one_mean_size\" = result_one_mean_size(input),\n                  \"two_mean_size\" = result_two_mean_size(input),\n                  \"k_mean_size\" = result_k_mean_size(input),\n                  \"one_prop_size\" = result_one_prop_size(input),\n                  \"two_prop_size\" = result_two_prop_size(input),\n                  \"pair_prop_size\" = result_pair_prop_size(input),\n                  \"k_prop_size\" = result_k_prop_size(input),\n                  \"coxph_size\" = result_coxph_size(input),\n                  \"or_size\" = result_or_size(input),\n                  \"sccs_size\" = result_sccs_size(input),\n                  \"one_norm_size\" = result_one_norm_size(input),\n                  \"one_bino_size\" = result_one_bino_size(input)\n                  )\n    if (input$mode == \"size\") {\n      paste(\"Sample size: \", res)\n    } else if (input$mode == \"power\") {\n      paste(\"Power: \", res)\n    }\n    })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"source/coxph_size.R","content":"#' Sample Size or Power for Cox Proportional Hazards\n#'\n#' Calculates sample size or power for a cox proportional hazards model.\n#'\n#' @param hr Numeric. True hazard ratio.\n#' @param hr0 Numeric (optional). Null hypothesis hazard ratio. Required for `\"2-side\"`, `\"non-inferiority\"` test.\n#' @param delta Numeric (optional). Margin for `\"equivalence test\"`. Required for `\"equivalence\"` test.\n#' @param pE Numeric. Overall event probability.\n#' @param pA Numeric. Proportion of group A.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#' @param test_type Character. `\"2-side\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"`/`\"non-inferiority`:\n#'   - For sample size: `hr`, `hr0`, `pE`, `pA`, `alpha`, `beta`\n#'   - For power: `hr`, `hr0`, `pE`, `pA`, `alpha`, `n`\n#'\n#' - `\"equivalence\"`:\n#'   - For sample size: `hr`, `delta`, `pE`, `pA`, `alpha`, `beta`\n#'   - For power: `hr`, `delta`, `pE`, `pA`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size for a `\"2-side\"` test\n#' coxph_size(hr = 2, hr0 = 1, pE = 0.8, pA = 0.5,\n#'            alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' coxph_size(hr = 2, hr0 = 1, pE = 0.8, pA = 0.5,\n#'            alpha = 0.05, n = 82, test_type = \"2-side\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' coxph_size(hr = 2, hr0 = 1, pE = 0.8, pA = 0.5,\n#'            alpha = 0.025, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' coxph_size(hr = 2, hr0 = 1, pE = 0.8, pA = 0.5,\n#'            alpha = 0.025, n = 82, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' coxph_size(hr = 1, delta = 0.5, pE = 0.8, pA = 0.5,\n#'            alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' coxph_size(hr = 1, delta = 0.5, pE = 0.8, pA = 0.5,\n#'            alpha = 0.05, n = 172, test_type = \"equivalence\")\n#'\n#' @export\ncoxph_size <- function(hr, hr0 = NULL, delta = NULL, pE, pA, alpha, beta = NULL, n = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling(((qnorm(1-alpha/2)+qnorm(1-beta))/(log(hr)-log(hr0)))^2/(pA*(1-pA)*pE)))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling(((qnorm(1-alpha)+qnorm(1-beta))/(log(hr)-log(hr0)))^2/(pA*(1-pA)*pE)))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling(((qnorm(1-alpha)+qnorm(1-beta/2))/(delta-abs(log(hr))))^2/(pA*(1-pA)*pE)))\n    }\n  } else if (!is.null(n)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((log(hr)-log(hr0))*sqrt(n*pA*(1-pA)*pE)-qnorm(1-alpha/2)))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((log(hr)-log(hr0))*sqrt(n*pA*(1-pA)*pE)-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*pnorm((delta-abs(log(hr)))*sqrt(n*pA*(1-pA)*pE)-qnorm(1-alpha))-1)\n    }\n  }\n}\n","type":"text"},{"name":"source/k_mean_size.R","content":"#' Sample Size or Power Calculation for K Means\n#'\n#' Calculates sample size or power for a multiple-sample mean test.\n#'\n#' @param muA Numeric. True mean of group A.\n#' @param muB Numeric. True mean of group B.\n#' @param kappa Numeric. Ratio of sample sizes (nA/nB). Default is 1.\n#' @param sd Numeric (optional). Standard deviation. Required for `\"2-side\"` test.\n#' @param sdA Numeric (optional). Standard deviation of group A. Required for `\"1-side\"` test.\n#' @param sdB Numeric (optional). Standard deviation of group B. Required for `\"1-side\"` test.\n#' @param tau Integer. Number of comparisons.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate (1 - power). Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation of `\"2-side\"` test.\n#' @param nA Integer (optional). Sample size of group A. Required for power calculation of `\"1-side\"` test.\n#' @param test_type Character. `\"2-side\"` or `\"1-side\"`. Default is `\"2-side\"`\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n`/`nA` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n`/`nA` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"`:\n#'   - For sample size: `muA`, `muB`, `sd`, `tau`, `alpha`, `beta`\n#'   - For power: `muA`, `muB`, `sd`, `tau`, `alpha`, `n`\n#'\n#' -`\"1-side\"`:\n#'   - For sample size: `muA`, `muB`, `sdA`, `sdB`, `tau`, `alpha`, `beta`\n#'   - For power: `muA`, `muB`, `sdA`, `sdB`, `tau`, `alpha`, `nA`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' k_mean_size(muA = 5, muB = 10, sd = 10, tau = 1,\n#'             alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' k_mean_size(muA = 5, muB = 10, sd = 10, tau = 1,\n#'             alpha = 0.05, n = 63, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' k_mean_size(muA = 132.86, muB = 127.44, kappa = 2, sdA = 15.34, sdB = 18.23, tau = 1,\n#'             alpha = 0.05, beta = 0.2, test_type = \"1-side\")\n#'\n#' # Power of `\"1-side\"` test\n#' k_mean_size(muA = 132.86, muB = 127.44, kappa = 2, sdA = 15.34, sdB = 18.23, tau = 1,\n#'             alpha = 0.05, nA = 85, test_type = \"1-side\")\n#'\n#' @export\nk_mean_size <- function(muA, muB, kappa = 1, sd = NULL, sdA = NULL, sdB = NULL, tau = 1, alpha, beta = NULL, n = NULL, nA = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling(2*(sd*(qnorm(1-alpha/(2/tau))+qnorm(1-beta))/(muA-muB))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling((sdA^2+sdB^2/kappa)*((qnorm(1-alpha/tau)+qnorm(1-beta))/(muA-muB))^2))\n    }\n  } else if (!is.null(n)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((muA-muB)/(sd*sqrt(2/n))-qnorm(1-alpha/(2/tau)))+pnorm(-(muA-muB)/(sd*sqrt(2/n))-qnorm(1-alpha/(2/tau))))\n    }\n  } else if (!is.null(nA)) {\n    if (test_type == \"1-side\") {\n      return(pnorm((muA-muB)/sqrt(sdA^2+sdB^2/kappa)*sqrt(nA)-qnorm(1-alpha/tau)))\n    }\n  }\n}\n","type":"text"},{"name":"source/k_prop_size.R","content":"#' Sample Size or Power Calculation for K proportion\n#'\n#' Calculates sample size or power for a multiple-sample proportion test.\n#'\n#' @param pA Numeric. True proportion of group A.\n#' @param pB Numeric. True proportion of group B.\n#' @param tau Integer. Number of comparisons.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required when calculating power.\n#'\n#' @return Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments:\n#' - For sample size: `pA`, `pB`, `tau`, `alpha`, `beta`\n#' - For power: `pA`, `pB`, `tau`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size\n#' k_prop_size(pA = 0.2, pB = 0.4, tau = 2,\n#'             alpha = 0.05, beta = 0.2)\n#'\n#' # Power\n#' k_prop_size(pA = 0.2, pB = 0.4, tau = 2,\n#'             alpha = 0.05, n = 96)\n#'\n#' @export\nk_prop_size <- function(pA, pB, tau, alpha, beta = NULL, n = NULL) {\n  if (!is.null(beta)) {\n    return(ceiling((pA*(1-pA)+pB*(1-pB))*((qnorm(1-alpha/2/tau)+qnorm(1-beta))/(pA-pB))^2))\n  } else if (!is.null(n)) {\n    return(pnorm((pA-pB)/sqrt(pA*(1-pA)/n+pB*(1-pB)/n)-qnorm(1-alpha/2/tau))+pnorm(-(pA-pB)/sqrt(pA*(1-pA)/n+pB*(1-pB)/n)-qnorm(1-alpha/2/tau)))\n  }\n}\n","type":"text"},{"name":"source/main_ui_coxph_size.R","content":"main_ui_coxph_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Time-To-Event Data: Cox PH, 2-Sided Equality\"),\n               p(\"You can use this calculator to perform power and sample size calculations for a time-to-event analysis, sometimes called survival analysis. A two-group time-to-event analysis involves comparing the time it takes for a certain event to occur between two groups.\"),\n               p(\"For example, we may be interested in whether there is a difference in recovery time following two different medical treatments. Or, in a marketing analysis we may be interested in whether there is a difference between two marketing campaigns with regards to the time between impression and action, where the action may be, for example, buying a product.\"),\n               p(\"Since 'time-to-event' methods were originally developed as 'survival' methods, the primary parameter of interest is called the hazard ratio. The hazard is the probability of the event occurring in the next instant given that it hasn't yet occurred. The hazard ratio is then the ratio of the hazards between two groups. Letting \\\\(\\\\theta\\\\) represent the hazard ratio, the hypotheses of interest are\"),\n               p(\"$$H_0:\\\\theta=\\\\theta_0$$\"),\n               p(\"$$H_1:\\\\theta\\\\ne \\\\theta_0$$\"),\n               p(\"where \\\\(\\\\theta_0\\\\) is the hazard ratio hypothesized under the null hypothesis. The calculator above and the formulas below use the notation that\"),\n               p(\"\\\\(\\\\theta\\\\)\tis the hazard ratio\"),\n               p(\"\\\\(\\\\ln(\\\\theta)\\\\)\tis the natural logarithm of the hazard ratio, or the log-hazard ratio\"),\n               p(\"\\\\(p_E\\\\)\tis the overall probability of the event occurring within the study period\"),\n               p(\"\\\\(p_A\\\\) and \\\\(p_B\\\\)\tare the proportions of the sample size allotted to the two groups, named 'A' and 'B'\"),\n               p(\"\\\\(n\\\\) is the total sample size\"),\n               p(\"Notice that \\\\(p_B = 1 - p_A\\\\).\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\frac{1}{p_A\\\\;p_B\\\\;p_E}\\\\left(\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{\\\\ln(\\\\theta)-\\\\ln(\\\\theta_0)}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left( z - z_{1-\\\\alpha/2} \\\\right) + \\\\Phi\\\\left( -z - z_{1-\\\\alpha/2} \\\\right)\\\\quad ,\\\\quad z=\\\\left( \\\\ln(\\\\theta) - \\\\ln(\\\\theta_0) \\\\right)\\\\sqrt{n\\\\;p_A\\\\;p_B\\\\;p_E}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1-\\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Time-To-Event Data: Cox PH 1-Sided, non-inferiority, or superiority\"),\n               p(\"You can use this calculator to perform power and sample size calculations for a time-to-event analysis, sometimes called survival analysis. A two-group time-to-event analysis involves comparing the time it takes for a certain event to occur between two groups.\"),\n               p(\"For example, we may be interested in whether there is a difference in recovery time following two different medical treatments. Or, in a marketing analysis we may be interested in whether there is a difference between two marketing campaigns with regards to the time between impression and action, where the action may be, for example, buying a product.\"),\n               p(\"Since 'time-to-event' methods were originally developed as 'survival' methods, the primary parameter of interest is called the hazard ratio. The hazard is the probability of the event occurring in the next instant given that it hasn't yet occurred. The hazard ratio is then the ratio of the hazards between two groups Letting \\\\(\\\\theta\\\\) represent the hazard ratio, the hypotheses of interest are\"),\n               p(\"$$H_0:\\\\theta=\\\\theta_0$$\"),\n               p(\"$$H_1:\\\\theta\\\\gt \\\\theta_0$$\"),\n               p(\"or\"),\n               p(\"$$H_0:\\\\theta=\\\\theta_0$$\"),\n               p(\"$$H_1:\\\\theta\\\\lt \\\\theta_0$$\"),\n               p(\"where \\\\(\\\\theta_0\\\\) is the hazard ratio hypothesized under the null hypothesis; \\\\(\\\\theta_0\\\\) can also be viewed as the non-inferiority/superiority margin, just like in the other non-inferiority/superiority calculators here. The calculator above and the formulas below use the notation that\"),\n               p(\"\\\\(\\\\theta\\\\)\tis the hazard ratio\"),\n               p(\"\\\\(\\\\ln(\\\\theta)\\\\)\tis the natural logarithm of the hazard ratio, or the log-hazard ratio\"),\n               p(\"\\\\(p_E\\\\)\tis the overall probability of the event occurring within the study period\"),\n               p(\"\\\\(p_A\\\\) and \\\\(p_B\\\\)\tare the proportions of the sample size allotted to the two groups, named 'A' and 'B'\"),\n               p(\"\\\\(n\\\\) is the total sample size\"),\n               p(\"Notice that \\\\(p_B = 1 - p_A\\\\).\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\frac{1}{p_A\\\\;p_B\\\\;p_E}\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\ln(\\\\theta)-\\\\ln(\\\\theta_0)}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left( z - z_{1-\\\\alpha} \\\\right)\\\\quad ,\\\\quad z=\\\\left( \\\\ln(\\\\theta) - \\\\ln(\\\\theta_0) \\\\right)\\\\sqrt{n\\\\;p_A\\\\;p_B\\\\;p_E}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1-\\\\beta\\\\) is power\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Time-To-Event Data: Cox PH, Equivalence\"),\n               p(\"You can use this calculator to perform power and sample size calculations for a time-to-event analysis, sometimes called survival analysis. A two-group time-to-event analysis involves comparing the time it takes for a certain event to occur between two groups.\"),\n               p(\"For example, we may be interested in whether there is a difference in recovery time following two different medical treatments. Or, in a marketing analysis we may be interested in whether there is a difference between two marketing campaigns with regards to the time between impression and action, where the action may be, for example, buying a product.\"),\n               p(\"Since 'time-to-event' methods were originally developed as 'survival' methods, the primary parameter of interest is called the hazard ratio. The hazard is the probability of the event occurring in the next instant given that it hasn't yet occurred. The hazard ratio is then the ratio of the hazards between two groups Letting \\\\(\\\\theta\\\\) represent the hazard ratio, the hypotheses of interest are\"),\n               p(\"$$H_0:|\\\\ln(\\\\theta)| \\\\ge \\\\delta$$\"),\n               p(\"$$H_1:|\\\\ln(\\\\theta)| \\\\lt \\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the equivalence margin, just like in the other equivalence calculators here. The calculator above and the formulas below use the notation that\"),\n               p(\"\\\\(\\\\theta\\\\) is the hazard ratio\"),\n               p(\"\\\\(\\\\ln(\\\\theta)\\\\) is the natural logarithm of the hazard ratio, or the log-hazard ratio\"),\n               p(\"\\\\(p_E\\\\) is the overall probability of the event occurring within the study period\"),\n               p(\"\\\\(p_A\\\\) and \\\\(p_B\\\\) are the proportions of the sample size allotted to the two groups, named 'A' and 'B'\"),\n               p(\"\\\\(n\\\\) is the total sample size\"),\n               p(\"Notice that \\\\(p_B = 1 - p_A\\\\).\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\frac{1}{p_A\\\\;p_B\\\\;p_E}\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{\\\\delta - |\\\\ln(\\\\theta)|}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= 2\\\\Phi\\\\left( z - z_{1-\\\\alpha} \\\\right) - 1\\\\quad ,\\\\quad z=\\\\left( \\\\delta - |\\\\ln(\\\\theta)| \\\\right)\\\\sqrt{n\\\\;p_A\\\\;p_B\\\\;p_E}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1-\\\\beta\\\\) is power\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_k_mean_size.R","content":"main_ui_k_mean_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare k Means: 1-Way ANOVA Pairwise, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests concerning whether the means of several groups are equal. The statistical model is called an Analysis of Variance, or ANOVA model. This calculator is for the particular situation where we wish to make\", em(\"pairwise\"), \"comparisons between groups. That is, we test for equality between two groups at a time, and we make several of these comparisons.\"),\n               p(\"For example, suppose we want to compare the means of three groups called foo, bar, and ack. These groups may represent groups of people that have been exposed to three different medical procedures, marketing schemes, etc. The complete list of pairwise comparisons are foo vs. bar, foo vs. ack, and bar vs. ack.\"),\n               p(\"In more general terms, we may have \\\\(k\\\\) groups, meaning there are a total of \\\\(K \\\\equiv \\\\binom{k}{2} = k(k - 1)/2\\\\) possible pairwise comparisons. When we test \\\\(\\\\tau \\\\le K\\\\) of these pairwise comparisons, we have \\\\(\\\\tau\\\\) hypotheses of the form\"),\n               p(\"$$H_0:\\\\mu_A=\\\\mu_B$$\"),\n               p(\"$$H_1:\\\\mu_A\\\\ne\\\\mu_B$$\"),\n               p(\"where \\\\(\\\\mu_A\\\\) and \\\\(\\\\mu_B\\\\) represent the means of two of the \\\\(k\\\\) groups, groups 'A' and 'B'. We'll compute the required sample size for each of the \\\\(\\\\tau\\\\) comparisons, and total sample size needed is the largest of these. In the formula below, \\\\(n\\\\) represents the sample size in any one of these \\\\(\\\\tau\\\\) comparisons; that is, there are \\\\(n/2\\\\) people in the 'A' group, and \\\\(n/2\\\\) people in the 'B' group.\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n = 2\\\\left( \\\\sigma \\\\frac{z_{1 - \\\\alpha / (2\\\\tau)} + z_{1 - \\\\beta}}{\\\\mu_A - \\\\mu_B} \\\\right)^2$$\"),\n               p(\"$$1 - \\\\beta = \\\\Phi\\\\left( z - z_{1 - \\\\alpha / (2\\\\tau)} \\\\right) + \\\\Phi\\\\left( -z - z_{1 - \\\\alpha / (2\\\\tau)} \\\\right)\\\\quad ,\\\\quad z = \\\\frac{\\\\mu_A - \\\\mu_B}{\\\\sigma \\\\sqrt{\\\\frac{2}{n}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\tau\\\\) is the number of comparisons to be made\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare k Means: 1-Way ANOVA Pairwise, 1-Sided\"),\n               p(\"This calculator is useful for testing the means of several groups. The statistical model is called an Analysis of Variance, or ANOVA model. This calculator is for the particular situation where we wish to make pairwise comparisons between groups. That is, we compare two groups at a time, and we make several of these comparisons.\"),\n               p(\"For example, suppose we want to compare the means of three groups called foo, bar, and ack. These groups may represent groups of people that have been exposed to three different medical procedures, marketing schemes, etc. The complete list of pairwise comparisons are foo vs. bar, foo vs. ack, and bar vs. ack.\"),\n               p(\"In more general terms, we may have \\\\(k\\\\) groups, meaning there are a total of \\\\(K \\\\equiv \\\\binom{k}{2} = k(k - 1)/2\\\\) possible pairwise comparisons. When we test \\\\(\\\\tau \\\\le K\\\\) of these pairwise comparisons, we have \\\\(\\\\tau\\\\) hypotheses of the form\"),\n               p(\"$$H_0:\\\\mu_A = \\\\mu_B$$\"),\n               p(\"$$H_1:\\\\mu_A < \\\\mu_B$$\"),\n               p(\"or\"),\n               p(\"$$H_0:\\\\mu_A = \\\\mu_B$$\"),\n               p(\"$$H_1:\\\\mu_A < \\\\mu_B$$\"),\n               p(\"where \\\\(\\\\mu_A\\\\) and \\\\(\\\\mu_B\\\\) represent the means of two of the \\\\(k\\\\) groups, groups 'A' and 'B'. We'll compute the required sample size for each of the \\\\(\\\\tau\\\\) comparisons, and total sample size needed is the largest of these.\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n_A = \\\\left( \\\\sigma_A^2 + \\\\frac{\\\\sigma_B^2}{\\\\kappa} \\\\right) \\\\left( \\\\frac{z_{1 - \\\\alpha / \\\\tau} + z_{1 - \\\\beta}}{\\\\mu_A - \\\\mu_B} \\\\right)^2$$\"),\n               p(\"$$n_B = \\\\kappa\\\\, n_A$$\"),\n               p(\"$$1 - \\\\beta = \\\\Phi\\\\left( \\\\frac{|\\\\mu_A - \\\\mu_B| \\\\sqrt{n_A}}{\\\\sqrt{\\\\sigma_A^2 + \\\\sigma_B^2 / \\\\kappa}} - z_{1 - \\\\alpha / \\\\tau} \\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa = n_A / n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\sigma_A\\\\) is standard deviation in Group \\\"A\\\"\"),\n               p(\"\\\\(\\\\sigma_B\\\\) is standard deviation in Group \\\"B\\\"\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\tau\\\\) is the number of comparisons to be made\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_k_prop_size.R","content":"main_ui_k_prop_size <- function() {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      h4(\"Calculate Sample Size Needed to Compare k Proportions: 1-Way ANOVA Pairwise\"),\n      p(\"This calculator is useful for tests concerning whether the proportions in several groups are equal. The statistical model is called an Analysis of Variance, or ANOVA model. This calculator is for the particular situation where we wish to make pairwise comparisons between groups. That is, we test for equality between two groups at a time, and we make several of these comparisons.\"),\n      p(\"For example, suppose we want to compare the proportions in three groups called foo, bar, and ack. These groups may represent groups of people that have been exposed to three different medical procedures, marketing schemes, etc. The complete list of pairwise comparisons are foo vs. bar, foo vs. ack, and bar vs. ack.\"),\n      p(\"In more general terms, we may have \\\\(k\\\\) groups, meaning there are a total of \\\\(K \\\\equiv \\\\binom{k}{2} = k(k - 1)/2\\\\) possible pairwise comparisons. When we test \\\\(\\\\tau \\\\le K\\\\) of these pairwise comparisons, we have \\\\(\\\\tau\\\\) hypotheses of the form\"),\n      p(\"$$H_0: p_A = p_B$$\"),\n      p(\"$$H_1: p_A \\\\ne p_B$$\"),\n      p(\"where \\\\(p_A\\\\) and \\\\(p_B\\\\) represent the proportions in two of the \\\\(k\\\\) groups, groups 'A' and 'B'. We'll compute the required sample size for each of the \\\\(\\\\tau\\\\) comparisons, and total sample size needed is the largest of these. In the formula below, \\\\(n\\\\) represents the sample size in any one of these \\\\(\\\\tau\\\\) comparisons; that is, there are \\\\(n/2\\\\) people in the 'A' group, and \\\\(n/2\\\\) people in the 'B' group.\"),\n      h4(\"Formulas\"),\n      p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n      p(\"$$n = \\\\left( p_A(1 - p_A) + p_B(1 - p_B) \\\\right) \\\\left( \\\\frac{z_{1 - \\\\alpha / (2\\\\tau)} + z_{1 - \\\\beta}}{p_A - p_B} \\\\right)^2$$\"),\n      p(\"$$1 - \\\\beta = \\\\Phi\\\\left( z - z_{1 - \\\\alpha / (2\\\\tau)} \\\\right) + \\\\Phi\\\\left( -z - z_{1 - \\\\alpha / (2\\\\tau)} \\\\right)\\\\quad ,\\\\quad z = \\\\frac{p_A - p_B}{\\\\sqrt{\\\\frac{p_A(1 - p_A)}{n} + \\\\frac{p_B(1 - p_B)}{n}}}$$\"),\n      p(\"where\"),\n      p(\"\\\\(n\\\\) is sample size\"),\n      p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n      p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n      p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n      p(\"\\\\(\\\\tau\\\\) is the number of comparisons to be made\"),\n      p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_one_bino_size.R","content":"main_ui_one_bino_size <- function() {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      h4(\"Calculate Sample Size Needed to Other: 1-Sample Binomial\"),\n      p(\"This calculator is useful for tests concerning whether a proportion, $p$, is equal to a reference value, $p_0$. The Null and Alternative hypotheses are\"),\n      p(\"$$H_0: p = p_0$$\"),\n      p(\"$$H_1: p \\\\ne p_0$$\"),\n      h4(\"Formulas\"),\n      p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n      p(\"$$n = p(1 - p) \\\\left( \\\\frac{z_{1 - \\\\alpha/2} + z_{1 - \\\\beta}}{p - p_0} \\\\right)^2$$\"),\n      p(\"$$1 - \\\\beta = \\\\Phi\\\\left( \\\\frac{p - p_0}{\\\\sqrt{\\\\frac{p(1 - p)}{n}}} - z_{1 - \\\\alpha/2} \\\\right) + \\\\Phi\\\\left( -\\\\frac{p - p_0}{\\\\sqrt{\\\\frac{p(1 - p)}{n}}} - z_{1 - \\\\alpha/2} \\\\right)$$\"),\n      p(\"where\"),\n      p(\"\\\\(n\\\\) is sample size\"),\n      p(\"\\\\(p_0\\\\) is the comparison value\"),\n      p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n      p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n      p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n      p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_one_mean_size.R","content":"main_ui_one_mean_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Mean: 1-Sample, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests concerning whether a mean, \\\\(\\\\mu\\\\), is equal to a reference value, \\\\(\\\\mu_0\\\\). The Null and Alternative hypotheses are\"),\n               p(\"$$H_0:\\\\mu=\\\\mu_0$$\"),\n               p(\"$$H_1:\\\\mu\\\\neq\\\\mu_0$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n = \\\\left( \\\\sigma \\\\frac{z_{1 - \\\\alpha/2} + z_{1 - \\\\beta}}{\\\\mu - \\\\mu_0} \\\\right)^2$$\"),\n               p(\"$$1 - \\\\beta = \\\\Phi\\\\left( z - z_{1 - \\\\alpha/2} \\\\right) + \\\\Phi\\\\left( -z - z_{1 - \\\\alpha/2} \\\\right)\\\\quad ,\\\\quad z = \\\\frac{\\\\mu - \\\\mu_0}{\\\\sigma / \\\\sqrt{n}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Mean: 1-Sample, 1-Sided\"),\n               p(\"This calculator is useful for tests concerning whether a mean, \\\\(\\\\mu\\\\), is equal to a reference value, \\\\(\\\\mu_0\\\\). The Null and Alternative hypotheses is either\"),\n               p(\"$$H_0:\\\\mu=\\\\mu_0$$\"),\n               p(\"$$H_1:\\\\mu\\\\lt\\\\mu_0$$\"),\n               p(\"or\"),\n               p(\"$$H_0:\\\\mu=\\\\mu_0$$\"),\n               p(\"$$H_1:\\\\mu\\\\gt\\\\mu_0$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\mu-\\\\mu_0}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{|\\\\mu-\\\\mu_0|}{\\\\sigma/\\\\sqrt{n}}-z_{1-\\\\alpha}\\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Mean: 1-Sample Non-Inferiority or Superiority\"),\n               p(\"This calculator is useful for the types of tests known as non-inferiority and superiority tests. Whether the null hypothesis represents 'non-inferiority' or 'superiority' depends on the context and whether the non-inferiority/superiority margin, \\\\(\\\\delta\\\\), is positive or negative. In this setting, we wish to test whether a mean, \\\\(\\\\mu\\\\), is non-inferior/superior to a reference value, \\\\(\\\\mu_0\\\\). The idea is that statistically significant differences between the mean and the reference value may not be of interest unless the difference is greater than a threshold, \\\\(\\\\delta\\\\). This is particularly popular in clinical studies, where the margin is chosen based on clinical judgement and subject-domain knowledge. The hypotheses to test are\"),\n               p(\"$$H_0:\\\\mu-\\\\mu_0\\\\le\\\\delta$$\"),\n               p(\"$$H_1:\\\\mu-\\\\mu_0>\\\\delta$$\"),\n               p(\"and \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin.\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\mu-\\\\mu_0-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{\\\\mu-\\\\mu_0-\\\\delta}{\\\\sigma/\\\\sqrt{n}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Mean: 1-Sample Equivalence\"),\n               p(\"This calculator is useful when we wish to test whether a mean, \\\\(\\\\mu\\\\), is different from a gold standard reference value, \\\\(\\\\mu_0\\\\). For example, we may wish to test whether a new product is equivalent to an existing, industry standard product. Here, the 'burden of proof', so to speak, falls on the new product; that is, equivalence is actually represented by the alternative, rather than the null hypothesis.\"),\n               p(\"$$H_0:|\\\\mu-\\\\mu_0|\\\\ge\\\\delta$$\"),\n               p(\"$$H_1:|\\\\mu-\\\\mu_0|<\\\\delta$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=\\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{\\\\delta-|\\\\mu-\\\\mu_0|}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=2\\\\left[\\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right)\\\\right]-1 \\\\quad ,\\\\quad z=\\\\frac{|\\\\mu-\\\\mu_0|-\\\\delta}{\\\\sigma/\\\\sqrt{n}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_one_norm_size.R","content":"main_ui_one_norm_size <- function() {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      h4(\"Calculate Sample Size Needed to Other: 1-Sample Normal\"),\n      p(\"This calculator is useful for tests concerning whether a mean, \\\\(\\\\mu\\\\), is equal to a reference value, \\\\(\\\\mu_0\\\\). The Null and Alternative hypotheses are\"),\n      p(\"$$H_0:\\\\mu=\\\\mu_0$$\"),\n      p(\"$$H_1:\\\\mu\\\\neq\\\\mu_0$$\"),\n      h4(\"Formulas\"),\n      p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n      p(\"$$n=\\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{\\\\mu-\\\\mu_0}\\\\right)^2$$\"),\n      p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{\\\\mu-\\\\mu_0}{\\\\sigma/\\\\sqrt{n}}-z_{1-\\\\alpha/2}\\\\right)+\\\\Phi\\\\left(-\\\\frac{\\\\mu-\\\\mu_0}{\\\\sigma/\\\\sqrt{n}}-z_{1-\\\\alpha/2}\\\\right)$$\"),\n      p(\"where\"),\n      p(\"where\"),\n      p(\"\\\\(n\\\\) is sample size\"),\n      p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n      p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n      p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n      p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n      p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_one_prop_size.R","content":"main_ui_one_prop_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Proportion: 1-Sample, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests concerning whether a proportion, \\\\(p\\\\), is equal to a reference value, \\\\(p_0\\\\). The Null and Alternative hypotheses are\"),\n               p(\"$$H_0:p=p_0$$\"),\n               p(\"$$H_1:p\\\\neq p_0$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=p(1-p)\\\\left(\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{p-p_0}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha/2}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha/2}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{p-p_0}{\\\\sqrt{\\\\frac{p(1-p)}{n}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(p_0\\\\) is the comparison value\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Proportion: 1-Sample, 1-Sided\"),\n               p(\"This calculator is useful for tests concerning whether a proportion, \\\\(p\\\\), is equal to a reference value, \\\\(p_0\\\\). The Null and Alternative hypotheses are\"),\n               p(\"$$H_0:p=p_0$$\"),\n               p(\"$$H_1:p\\\\lt p_0$$\"),\n               p(\"or\"),\n               p(\"$$H_0:p=p_0$$\"),\n               p(\"$$H_1:p\\\\gt p_0$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=p_0(1-p_0)\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}\\\\sqrt{\\\\frac{p(1-p)}{p_0(1-p_0)}}}{p-p_0}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\sqrt{\\\\frac{p_0(1-p_0)}{p(1-p)}}\\\\left(\\\\frac{|p-p_0|\\\\sqrt{n}}{\\\\sqrt{p_0(1-p_0)}}-z_{1-\\\\alpha})\\\\right)\\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(p_0\\\\) is the comparison value\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Proportion: 1-Sample Non-Inferiority or Superiority\"),\n               p(\"This calculator is useful for the types of tests known as non-inferiority and superiority tests. Whether the null hypothesis represents 'non-inferiority' or 'superiority' depends on the context and whether the non-inferiority/superiority margin, \\\\(\\\\delta\\\\), is positive or negative. In this setting, we wish to test whether a proportion, \\\\(p\\\\), is non-inferior/superior to a reference value, \\\\(p_0\\\\). The idea is that statistically significant differences between the proportion and the reference value may not be of interest unless the difference is greater than a threshold, \\\\(\\\\delta\\\\). This is particularly popular in clinical studies, where the margin is chosen based on clinical judgement and subject-domain knowledge. The hypotheses to test are\"),\n               p(\"$$H_0:p-p_0\\\\le\\\\delta$$\"),\n               p(\"$$H_1:p-p_0>\\\\delta$$\"),\n               p(\"and \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin.\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=p(1-p)\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{p-p_0-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{p-p_0-\\\\delta}{\\\\sqrt{\\\\frac{p(1-p)}{n}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(p_0\\\\) is the comparison value\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test 1 Proportion: 1-Sample Equivalence\"),\n               p(\"This calculator is useful when we wish to test whether a proportion, \\\\(p\\\\), is different from a gold standard reference value, \\\\(p_0\\\\). For example, we may wish to test whether a new product is equivalent to an existing, industry standard product. Here, the 'burden of proof', so to speak, falls on the new product; that is, equivalence is actually represented by the alternative, rather than the null hypothesis.\"),\n               p(\"$$H_0:|p-p_0|\\\\ge\\\\delta$$\"),\n               p(\"$$H_1:|p-p_0|<\\\\delta$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n=p(1-p)\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{|p-p_0|-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= 2\\\\left[\\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right)\\\\right]-1 \\\\quad ,\\\\quad z=\\\\frac{|p-p_0|-\\\\delta}{\\\\sqrt{\\\\frac{p(1-p)}{n}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(p_0\\\\) is the comparison value\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_or_size.R","content":"main_ui_or_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"equality\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Odds Ratio: Equality\"),\n               p(\"This calculator is useful for tests concerning whether the odds ratio, \\\\(OR\\\\), between two groups is different from the null value of 1. Suppose the two groups are 'A' and 'B', and we collect a sample from both groups -- i.e. we have two samples. We perform a two-sample test to determine whether the odds of the outcome in group A, \\\\(p_A(1 - p_A)\\\\), is different from the odds of the outcome in group B, \\\\(p_B(1 - p_B)\\\\), where \\\\(p_A\\\\) and \\\\(p_B\\\\) are the probabilities of the outcome in the two groups. The hypotheses are\"),\n               p(\"$$H_0:OR=1$$\"),\n               p(\"$$H_1:OR\\\\neq1$$\"),\n               p(\"where the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               p(\"and\"),\n               p(\"$$OR=\\\\frac{p_A(1-p_B)}{p_B(1-p_A)}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{1}{\\\\kappa p_A(1-p_A)}+\\\\frac{1}{p_B(1-p_B)}\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{\\\\ln(OR)}\\\\right)^2$$\"),\n               p(\"$$1 - \\\\beta = \\\\Phi\\\\left( z - z_{1 - \\\\alpha/2} \\\\right) + \\\\Phi\\\\left( -z - z_{1 - \\\\alpha/2} \\\\right)\\\\quad ,\\\\quad z = \\\\frac{\\\\ln(OR) \\\\sqrt{n_B}}{\\\\sqrt{\\\\left( \\\\frac{1}{\\\\kappa p_A (1 - p_A)} + \\\\frac{1}{p_B (1 - p_B)} \\\\right)}}$$\"),\n               p(\"where\"),\n               p(\"$$OR=\\\\frac{p_A(1-p_B)}{p_B(1-p_A)}$$\"),\n               p(\"and where\"),\n               p(\"\\\\(\\\\kappa = n_A / n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Odds Ratio: Non-Inferiority or Superiority\"),\n               p(\"This calculator is useful for the types of tests known as non-inferiority and superiority tests. Whether the null hypothesis represents 'non-inferiority' or 'superiority' depends on the context and whether the non-inferiority/superiority margin, \\\\(\\\\delta\\\\), is positive or negative. In this setting, we wish to test whether the odds of an outcome in group 'A', \\\\(p_A(1-p_A)\\\\), is non-inferior/superior to the odds of the outcome in group 'B', \\\\(p_B(1-p_B)\\\\), where \\\\(p_A\\\\) and \\\\(p_B\\\\) are the probabilities of the outcome in the two groups. We collect a sample from both groups, and thus will conduct a two-sample test. The idea is that statistically significant differences between the proportions may not be of interest unless the difference is greater than a threshold. This is particularly popular in clinical studies, where the margin is chosen based on clinical judgement and subject-domain knowledge. The hypotheses to test are\"),\n               p(\"$$H_0:\\\\ln(OR)\\\\le\\\\delta$$\"),\n               p(\"$$H_1:\\\\ln(OR)>\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin on the log scale, and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{1}{\\\\kappa p_A(1-p_A)}+\\\\frac{1}{p_B(1-p_B)}\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\ln(OR)-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{(\\\\ln(OR)-\\\\delta)\\\\sqrt{n_B}}{\\\\sqrt{\\\\frac{1}{\\\\kappa p_A(1-p_A)}+\\\\frac{1}{p_B(1-p_B)}}}$$\"),\n               p(\"where\"),\n               p(\"$$OR=\\\\frac{p_A(1-p_B)}{p_B(1-p_A)}$$\"),\n               p(\"and where\"),\n               p(\"\\\\(\\\\kappa = n_A / n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Test Odds Ratio: Equivalence\"),\n               p(\"This calculator is useful when we wish to test whether the odds of an outcome in two groups are equivalent, without concern of which group's odds is larger. Suppose we collect a sample from a group 'A' and a group 'B'; that is we collect two samples, and will conduct a two-sample test. For example, we may wish to test whether a new product is equivalent to an existing, industry standard product. Here, the 'burden of proof', so to speak, falls on the new product; that is, equivalence is actually represented by the alternative, rather than the null hypothesis.\"),\n               p(\"$$H_0:|\\\\ln(OR)|\\\\ge\\\\delta$$\"),\n               p(\"$$H_1:|\\\\ln(OR)|<\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{1}{\\\\kappa p_A(1-p_A)}+\\\\frac{1}{p_B(1-p_B)}\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{|\\\\ln(OR)|-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{(|\\\\ln(OR)|-\\\\delta)\\\\sqrt{n_B}}{\\\\sqrt{\\\\frac{1}{\\\\kappa p_A(1-p_A)}+\\\\frac{1}{p_B(1-p_B)}}}$$\"),\n               p(\"where\"),\n               p(\"$$OR=\\\\frac{p_A(1-p_B)}{p_B(1-p_A)}$$\"),\n               p(\"and where\"),\n               p(\"\\\\(\\\\kappa = n_A / n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_pair_prop_size.R","content":"main_ui_pair_prop_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare Paired Proportions: McNemar's Z-test, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests comparing paired proportions. Suppose that our sample consists of pairs of subjects, and that each pair contains a subject from group 'A' and a subject from group 'B'. Further suppose that we wish to compare the probability that an event occurs in group 'A' to that in group 'B'. Example study designs include matched case-control studies and cross-over studies. Conceptually, the data can be listed as in the following table.\"),\n               tags$table(\n                 tags$tbody(\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(colspan = 2, \"Group 'B'\")\n                   ),\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(\"Success\"),\n                     tags$td(\"Failure\")\n                   ),\n                   tags$tr(\n                     tags$td(rowspan = 2, \"Group 'A'\"),\n                     tags$td(\"Success\"),\n                     tags$td(withMathJax(\"$$n_{11}$$\")),\n                     tags$td(withMathJax(\"$$n_{10}$$\"))\n                   ),\n                   tags$tr(\n                     tags$td(\"Failure\"),\n                     tags$td(withMathJax(\"$$n_{01}$$\")),\n                     tags$td(withMathJax(\"$$n_{00}$$\"))\n                   )\n                 )\n               ),\n               p(\"Here, \\\\(n_{ij}\\\\) represents the number of pairs having $i$ successes in Group 'A' and $j$ successes in Group 'B'. The corresponding proportions are denoted \\\\(p_{ij}\\\\), with table\"),\n               tags$table(\n                 tags$tbody(\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(colspan = 2, \"Group 'B'\")\n                   ),\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(\"Success\"),\n                     tags$td(\"Failure\")\n                   ),\n                   tags$tr(\n                     tags$td(rowspan = 2, \"Group 'A'\"),\n                     tags$td(\"Success\"),\n                     tags$td(withMathJax(\"$$p_{11}$$\")),\n                     tags$td(withMathJax(\"$$p_{10}$$\"))\n                   ),\n                   tags$tr(\n                     tags$td(\"Failure\"),\n                     tags$td(withMathJax(\"$$p_{01}$$\")),\n                     tags$td(withMathJax(\"$$p_{00}$$\"))\n                   )\n                 )\n               ),\n               p(\"Interest is in comparing the following hypotheses:\"),\n               p(\"\\\\(H_0\\\\): Both groups have the same success probability\", style = \"text-align: center;\"),\n               p(\"\\\\(H_1\\\\): The success probability is not equal between the Groups\", style = \"text-align: center;\"),\n               p(\"Mathematically, this can be represented as\"),\n               p(\"$$H_0:p_{10}=p_{01}$$\"),\n               p(\"$$H_1:p_{10}\\\\neq p_{01}$$\"),\n               p(\"In the formulas below, we use the notation that\"),\n               p(\"$$p_{disc}=p_{10}+p_{01}$$\"),\n               p(\"and\"),\n               p(\"$$p_{diff}=p_{10}-p_{01}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n=\\\\left(\\\\frac{z_{1-\\\\alpha/2}\\\\sqrt{p_{disc}}+z_{1-\\\\beta}\\\\sqrt{p_{disc}-p_{diff}^2}}{p_{diff}}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{p_{diff}\\\\sqrt{n}-z_{1-\\\\alpha/2}\\\\sqrt{p_{disc}}}{\\\\sqrt{p_{disc}-p_{diff}^2}}\\\\right)$$\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare Paired Proportions: McNemar's Z-test, 1-Sided\"),\n               p(\"This calculator is useful for tests comparing paired proportions. Suppose that our sample consists of pairs of subjects, and that each pair contains a subject from group 'A' and a subject from group 'B'. Further suppose that we wish to compare the probability that an event occurs in group 'A' to that in group 'B'. Example study designs include matched case-control studies and cross-over studies. Conceptually, the data can be listed as in the following table.\"),\n               tags$table(\n                 tags$tbody(\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(colspan = 2, \"Group 'B'\")\n                   ),\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(\"Success\"),\n                     tags$td(\"Failure\")\n                   ),\n                   tags$tr(\n                     tags$td(rowspan = 2, \"Group 'A'\"),\n                     tags$td(\"Success\"),\n                     tags$td(withMathJax(\"$$n_{11}$$\")),\n                     tags$td(withMathJax(\"$$n_{10}$$\"))\n                   ),\n                   tags$tr(\n                     tags$td(\"Failure\"),\n                     tags$td(withMathJax(\"$$n_{01}$$\")),\n                     tags$td(withMathJax(\"$$n_{00}$$\"))\n                   )\n                 )\n               ),\n               p(\"Here, \\\\(n_{ij}\\\\) represents the number of pairs having \\\\(i\\\\) successes in Group 'A' and \\\\(j\\\\) successes in Group 'B'. The corresponding proportions are denoted \\\\(p_{ij}\\\\), with table\"),\n               tags$table(\n                 tags$tbody(\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(colspan = 2, \"Group 'B'\")\n                   ),\n                   tags$tr(\n                     tags$td(\"\"),\n                     tags$td(\"\"),\n                     tags$td(\"Success\"),\n                     tags$td(\"Failure\")\n                   ),\n                   tags$tr(\n                     tags$td(rowspan = 2, \"Group 'A'\"),\n                     tags$td(\"Success\"),\n                     tags$td(withMathJax(\"$$p_{11}$$\")),\n                     tags$td(withMathJax(\"$$n_{10}$$\"))\n                   ),\n                   tags$tr(\n                     tags$td(\"Failure\"),\n                     tags$td(withMathJax(\"$$p_{01}$$\")),\n                     tags$td(withMathJax(\"$$p_{00}$$\"))\n                   )\n                 )\n               ),\n               p(\"Interest is in comparing the following hypotheses:\"),\n               p(\"\\\\(H_0\\\\): Both groups have the same success probability\", style = \"text-align: center;\"),\n               p(\"\\\\(H_1\\\\): The success probability is not equal between the Groups\", style = \"text-align: center;\"),\n               p(\"Mathematically, this can be represented as\"),\n               p(\"$$H_0:p_{10}=p_{01}$$\"),\n               p(\"$$H_1:p_{10}\\\\lt p_{01}$$\"),\n               p(\"or\"),\n               p(\"$$H_0:p_{10}=p_{01}$$\"),\n               p(\"$$H_1:p_{10}\\\\gt p_{01}$$\"),\n               p(\"In the formulas below, we use the notation that\"),\n               p(\"or\"),\n               p(\"$$p_{disc}=p_{10}+p_{01}$$\"),\n               p(\"and\"),\n               p(\"$$p_{diff}=p_{10}-p_{01}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n=\\\\left(\\\\frac{z_{1-\\\\alpha}\\\\sqrt{p_{disc}}+z_{1-\\\\beta}\\\\sqrt{p_{disc}-p_{diff}^2}}{p_{diff}}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{|p_{diff}|\\\\sqrt{n}-z_{1-\\\\alpha}\\\\sqrt{p_{disc}}}{\\\\sqrt{p_{disc}-p_{diff}^2}}\\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(n\\\\) is sample size\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_sccs_size.R","content":"main_ui_sccs_size <- function() {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      h4(\"Calculate Sample Size Needed to Test Relative Incidence in Self Controlled Case Series Studies: SCCS, Alt-2\"),\n      p(\"The Self-Controlled Case Series (SCCS) method was originally developed by Farrington (1995) to compare relative incidence of adverse events following vaccination. In brief, the method compares incidence in a 'risk' time period shortly following exposure (vaccination) to the remainder of the observation period, the control period. Since it's initial development the SCCS method has been expanded in several ways, and has been used in a wide variety of pharmacoepidemiology studies. A salient feature of the method is that factors that do not vary with time (e.g. sex, race) are inherently accounted for.\"),\n      p(\"Suppose each individual spends \\\\(r\\\\) proportion of the observation period in the exposed time period, and let \\\\(\\\\rho=e^{\\\\gamma}\\\\) represent the relative incidence; i.e. incidence is increased by a factor of \\\\(\\\\rho\\\\) in the exposed period compared to the control period. The hypotheses to be tested are\"),\n      p(\"$$H_0:\\\\rho=1$$\"),\n      p(\"$$H_1:\\\\rho \\\\neq 1$$\"),\n      p(\"This calculator implements the second method (i.e. alternative 2) for computing sample size for SCCS studies presented by Musonda et al. (2006). These computation formulas are based on the sampling distribution of \\\\(\\\\gamma=\\\\log(\\\\rho)\\\\).\"),\n      p(\"Under the null hypothesis \\\\(\\\\gamma\\\\) is approximately distributed\"),\n      p(\"$$ N\\\\left(0\\\\;,\\\\;\\\\frac{1}{n r (1-r)}\\\\right)$$\"),\n      p(\"where \\\\(n\\\\) is the number of individuals exposed during the observation period. Under the alternative hypothesis \\\\(\\\\gamma\\\\) is approximately distributed\"),\n      p(\"$$ N\\\\left(\\\\gamma\\\\;,\\\\;\\\\frac{(pr+1-r)^2}{npr(1-r)}\\\\right)$$\"),\n      p(\"This leads to the below formulas for power and sample size.\"),\n      h4(\"Formulas\"),\n      p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n      p(\"$$n=\\\\left(\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}(\\\\rho r + 1 - r)/\\\\sqrt{\\\\rho}}{\\\\sqrt{r(1-r)}\\\\log(\\\\rho)}\\\\right)^2$$\"),\n      p(\"$$1-\\\\beta= \\\\Phi\\\\left( \\\\frac{\\\\gamma\\\\sqrt{n\\\\rho r(1-r)} - z_{1-\\\\alpha/2}\\\\sqrt{\\\\rho}}{\\\\rho r + 1 - r} \\\\right) $$\"),\n      p(\"where\"),\n      p(\"\\\\(n\\\\) is sample size\"),\n      p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n      p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n      p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n      p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_two_mean_size.R","content":"main_ui_two_mean_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Means: 2-Sample, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests concerning whether the means of two groups are different. Suppose the two groups are 'A' and 'B', and we collect a sample from both groups -- i.e. we have two samples. We perform a two-sample test to determine whether the mean in group A, \\\\(\\\\mu_A\\\\), is different from the mean in group B, \\\\(\\\\mu_B\\\\). The hypotheses are\"),\n               p(\"$$H_0:\\\\mu_A-\\\\mu_B=0$$\"),\n               p(\"$$H_1:\\\\mu_A-\\\\mu_B\\\\neq0$$\"),\n               p(\"where the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(1+\\\\frac{1}{\\\\kappa}\\\\right) \\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{\\\\mu_A-\\\\mu_B}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha/2}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha/2}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{\\\\mu_A-\\\\mu_B}{\\\\sigma\\\\sqrt{\\\\frac{1}{n_A}+\\\\frac{1}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Means: 2-Sample, 1-Sided\"),\n               p(\"This calculator is useful for tests concerning whether the means of two groups are different. Suppose the two groups are 'A' and 'B', and we collect a sample from both groups -- i.e. we have two samples. We perform a two-sample test to determine whether the mean in group A, \\\\(\\\\mu_A\\\\), is different from the mean in group B, \\\\(\\\\mu_B). The hypotheses are\"),\n               p(\"$$H_0:\\\\mu_A=\\\\mu_B$$\"),\n               p(\"$$H_1:\\\\mu_A\\\\lt \\\\mu_B$$\"),\n               p(\"or\"),\n               p(\"$$H_0:\\\\mu_A=\\\\mu_B$$\"),\n               p(\"$$H_1:\\\\mu_A\\\\gt \\\\mu_B$$\"),\n               p(\"where the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_B}{n_A}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$n_A=\\\\left(\\\\sigma_A^2+\\\\sigma_B^2/\\\\kappa\\\\right)\\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\mu_A-\\\\mu_B}\\\\right)^2$$\"),\n               p(\"$$n_B=\\\\kappa n_A$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{|\\\\mu_A-\\\\mu_B|\\\\sqrt{n_A}}{\\\\sqrt{\\\\sigma_A^2+\\\\sigma_B^2/\\\\kappa}}-z_{1-\\\\alpha}\\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\sigma_A\\\\) is standard deviation of Group \\\"A\\\"\"),\n               p(\"\\\\(\\\\sigma_B\\\\) is standard deviation of Group \\\"B\\\"\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Means: 2-Sample Non-Inferiority or Superiority\"),\n               p(\"This calculator is useful for the types of tests known as non-inferiority and superiority tests. Whether the null hypothesis represents 'non-inferiority' or 'superiority' depends on the context and whether the non-inferiority/superiority margin, \\\\(\\\\delta\\\\), is positive or negative. In this setting, we wish to test whether the mean in group 'A', \\\\(\\\\mu_A\\\\), is non-inferior/superior to the mean in group 'B', \\\\(\\\\mu_B\\\\). We collect a sample from both groups, and thus will conduct a two-sample test. The idea is that statistically significant differences between the means may not be of interest unless the difference is greater than a threshold, \\\\(\\\\delta\\\\). This is particularly popular in clinical studies, where the margin is chosen based on clinical judgement and subject-domain knowledge. The hypotheses to test are\"),\n               p(\"$$H_0:\\\\mu_A-\\\\mu_B\\\\le\\\\delta$$\"),\n               p(\"$$H_1:\\\\mu_A-\\\\mu_B>\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(1+\\\\frac{1}{\\\\kappa}\\\\right) \\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{\\\\mu_A-\\\\mu_B-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{\\\\mu_A-\\\\mu_B-\\\\delta}{\\\\sigma\\\\sqrt{\\\\frac{1}{n_A}+\\\\frac{1}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) ins the testing margin\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Means: 2-Sample Equivalence\"),\n               p(\"This calculator is useful when we wish to test whether the means of two groups are equivalent, without concern of which group's mean is larger. Suppose we collect a sample from a group 'A' and a group 'B'; that is we collect two samples, and will conduct a two-sample test. For example, we may wish to test whether a new product is equivalent to an existing, industry standard product. Here, the 'burden of proof', so to speak, falls on the new product; that is, equivalence is actually represented by the alternative, rather than the null hypothesis.\"),\n               p(\"$$H_0:|\\\\mu_A-\\\\mu_B|\\\\ge\\\\delta$$\"),\n               p(\"$$H_1:|\\\\mu_A-\\\\mu_B|<\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_1}{n_2}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(1+\\\\frac{1}{\\\\kappa}\\\\right) \\\\left(\\\\sigma\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{|\\\\mu_A-\\\\mu_B|-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= 2\\\\left[\\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right)\\\\right]-1 \\\\quad ,\\\\quad z=\\\\frac{|\\\\mu_A-\\\\mu_B|-\\\\delta}{\\\\sigma\\\\sqrt{\\\\frac{1}{n_A}+\\\\frac{1}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\sigma\\\\) is standard deviation\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) ins the testing margin\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/main_ui_two_prop_size.R","content":"main_ui_two_prop_size <- function(test_type) {\n  withMathJax(\n    tagList(\n      h4(\"Result\"),\n      tags$div(\n        style = \"font-size: 24px; font-weight: bold;\",\n        textOutput(\"result\")\n      ),\n      hr(),\n      switch(test_type,\n             \"2-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Proportions: 2-Sample, 2-Sided Equality\"),\n               p(\"This calculator is useful for tests concerning whether the proportions in two groups are different. Suppose the two groups are 'A' and 'B', and we collect a sample from both groups -- i.e. we have two samples. We perform a two-sample test to determine whether the proportion in group A, $p_A$, is different from the proportion in group B, $p_B$. The hypotheses are\"),\n               p(\"$$H_0:p_A-p_B=0$$\"),\n               p(\"$$H_1:p_A-p_B\\\\neq0$$\"),\n               p(\"where the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{p_A(1-p_A)}{\\\\kappa}+p_B(1-p_B)\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha/2}+z_{1-\\\\beta}}{p_A-p_B}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha/2}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha/2}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{p_A-p_B}{\\\\sqrt{\\\\frac{p_A(1-p_A)}{n_A}+\\\\frac{p_B(1-p_B)}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"1-side\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Proportions: 2-Sample, 1-Sided\"),\n               p(\"This calculator is useful for tests concerning whether the proportions in two groups are different. Suppose the two groups are 'A' and 'B', and we collect a sample from both groups -- i.e. we have two samples. We perform a two-sample test to determine whether the proportion in group A, \\\\(p_A\\\\), is different from the proportion in group B, \\\\(p_B\\\\). The hypotheses are\"),\n               p(\"$$H_0:p_A=p_B$$\"),\n               p(\"$$H_1:p_A\\\\lt p_B$$\"),\n               p(\"or\"),\n               p(\"$$H_0:p_A=p_B$$\"),\n               p(\"$$H_1:p_A\\\\gt p_B$$\"),\n               p(\"where the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{p_A(1-p_A)}{\\\\kappa}+p_B(1-p_B)\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{p_A-p_B}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta=\\\\Phi\\\\left(\\\\frac{|p_A-p_B|}{\\\\sqrt{\\\\frac{p_A(1-p_A)}{n_A}+\\\\frac{p_B(1-p_B)}{n_B}}}-z_{1-\\\\alpha}\\\\right)$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\")\n             ),\n             \"non-inferiority\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Proportions: 2-Sample Non-Inferiority or Superiority\"),\n               p(\"This calculator is useful for the types of tests known as non-inferiority and superiority tests. Whether the null hypothesis represents 'non-inferiority' or 'superiority' depends on the context and whether the non-inferiority/superiority margin, \\\\(\\\\delta\\\\), is positive or negative. In this setting, we wish to test whether the proportion in group 'A', \\\\(p_A\\\\), is non-inferior/superior to the proportion in group 'B', \\\\(p_B\\\\). We collect a sample from both groups, and thus will conduct a two-sample test. The idea is that statistically significant differences between the proportions may not be of interest unless the difference is greater than a threshold, \\\\(\\\\delta\\\\). This is particularly popular in clinical studies, where the margin is chosen based on clinical judgement and subject-domain knowledge. The hypotheses to test are\"),\n               p(\"$$H_0:p_A-p_B\\\\le\\\\delta$$\"),\n               p(\"$$H_1:p_A-p_B>\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{p_A(1-p_A)}{\\\\kappa}+p_B(1-p_B)\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta}}{p_A-p_B-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= \\\\Phi\\\\left(z-z_{1-\\\\alpha/2}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha/2}\\\\right) \\\\quad ,\\\\quad z=\\\\frac{p_A-p_B-\\\\delta}{\\\\sqrt{\\\\frac{p_A(1-p_A)}{n_A}+\\\\frac{p_B(1-p_B)}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             ),\n             \"equivalence\" = tagList(\n               h4(\"Calculate Sample Size Needed to Compare 2 Proportions: 2-Sample Equivalence\"),\n               p(\"This calculator is useful when we wish to test whether the proportions in two groups are equivalent, without concern of which group's proportion is larger. Suppose we collect a sample from a group 'A' and a group 'B'; that is we collect two samples, and will conduct a two-sample test. For example, we may wish to test whether a new product is equivalent to an existing, industry standard product. Here, the 'burden of proof', so to speak, falls on the new product; that is, equivalence is actually represented by the alternative, rather than the null hypothesis.\"),\n               p(\"$$H_0:|p_A-p_B|\\\\ge\\\\delta$$\"),\n               p(\"$$H_1:|p_A-p_B|<\\\\delta$$\"),\n               p(\"where \\\\(\\\\delta\\\\) is the superiority or non-inferiority margin and the ratio between the sample sizes of the two groups is\"),\n               p(\"$$\\\\kappa=\\\\frac{n_A}{n_B}$$\"),\n               h4(\"Formulas\"),\n               p(\"This calculator uses the following formulas to compute sample size and power, respectively:\"),\n               p(\"$$ n_A=\\\\kappa n_B \\\\;\\\\text{ and }\\\\; n_B=\\\\left(\\\\frac{p_A(1-p_A)}{\\\\kappa}+p_B(1-p_B)\\\\right) \\\\left(\\\\frac{z_{1-\\\\alpha}+z_{1-\\\\beta/2}}{|p_A-p_B|-\\\\delta}\\\\right)^2$$\"),\n               p(\"$$1-\\\\beta= 2\\\\left[\\\\Phi\\\\left(z-z_{1-\\\\alpha}\\\\right)+\\\\Phi\\\\left(-z-z_{1-\\\\alpha}\\\\right)\\\\right]-1 \\\\quad ,\\\\quad z=\\\\frac{|p_A-p_B|-\\\\delta}{\\\\sqrt{\\\\frac{p_A(1-p_A)}{n_A}+\\\\frac{p_B(1-p_B)}{n_B}}}$$\"),\n               p(\"where\"),\n               p(\"\\\\(\\\\kappa=n_A/n_B\\\\) is the matching ratio\"),\n               p(\"\\\\(\\\\Phi\\\\) is the standard Normal distribution function\"),\n               p(\"\\\\(\\\\Phi^{-1}\\\\) is the standard Normal quantile function\"),\n               p(\"\\\\(\\\\alpha\\\\) is Type I error\"),\n               p(\"\\\\(\\\\beta\\\\) is Type II error, meaning \\\\(1 - \\\\beta\\\\) is power\"),\n               p(\"\\\\(\\\\delta\\\\) is the testing margin\")\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"source/one_bino_size.R","content":"#' Sample Size or Power for One-Sample Binomial Proportion Test\n#'\n#' Calculates sample size or power for a two-sample binomial proportion test.\n#'\n#' @param p Numeric. True proportion.\n#' @param p0 Numeric. Null hypothesis proportion.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments:\n#' - For sample size: `\"p\"`, `\"p0\"`, `\"alpha\"`, `\"beta\"`\n#' - For power: `\"p\"`, `\"p0\"`, `\"alpha\"`, `\"n\"`\n#'\n#' @examples\n#' # Required sample size\n#' one_bino_size(p = 0.5, p0 = 0.3,\n#'               alpha = 0.05, beta = 0.2)\n#'\n#' # Power\n#' one_bino_size(p = 0.5, p0 = 0.3,\n#'               alpha = 0.05, n = 50)\n#'\n#' @export\none_bino_size <- function(p, p0, alpha, beta = NULL, n = NULL) {\n  if (!is.null(beta)) {\n    return(ceiling(p*(1-p)*((qnorm(1-alpha/2)+qnorm(1-beta))/(p-p0))^2))\n  } else if (!is.null(n)) {\n    return(pnorm((p-p0)/sqrt(p*(1-p)/n)-qnorm(1-alpha/2))+pnorm(-(p-p0)/sqrt(p*(1-p)/n)-qnorm(1-alpha/2)))\n  }\n}\n","type":"text"},{"name":"source/one_mean_size.R","content":"#' Sample Size or Power for One-Sample Mean Test\n#'\n#' Calculates sample size or power for a one-sample mean test.\n#'\n#' @param mu Numeric. True mean.\n#' @param mu0 Numeric. Null hypothesis mean.\n#' @param delta Numeric (optional). Margin for `\"non-inferiority\"` or `\"equivalence\"` test. Required for `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param sd Numeric. Standard deviation.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#' @param test_type Character. `\"2-side\"`, `\"1-side\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"` / `\"1-side\"`:\n#'   - For sample size: `mu`, `mu0`, `sd`, `alpha`, `beta`\n#'   - For power: `mu`, `mu0`, `sd`, `alpha`, `n`\n#'\n#' - `\"non-inferiority\"` / `\"equivalence\"`:\n#'   - For sample size: `mu`, `mu0`, `delta`, `sd`, `alpha`, `beta`\n#'   - For power: `mu`, `mu0`, `delta`, `sd`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' one_mean_size(mu = 2, mu0 = 1.5, sd = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' one_mean_size(mu = 2, mu0 = 1.5, sd = 1,\n#'               alpha = 0.05, n = 32, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' one_mean_size(mu = 115, mu0 = 120, sd = 24,\n#'               alpha = 0.05, beta = 0.2, test_type = \"1-side\")\n#'\n#' # Power of `\"1-side\"` test\n#' one_mean_size(mu = 115, mu0 = 120, sd = 24,\n#'               alpha = 0.05, n = 143, test_type = \"1-side\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' one_mean_size(mu = 2, mu0 = 1.5, delta = -0.5, sd = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' one_mean_size(mu = 2, mu0 = 1.5, delta = -0.5, sd = 1,\n#'               alpha = 0.05, n = 7, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' one_mean_size(mu = 2, mu0 = 2, delta = 0.05, sd = 0.1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' one_mean_size(mu = 2, mu0 = 2, delta = 0.05, sd = 0.1,\n#'               alpha = 0.05, n = 35, test_type = \"equivalence\")\n#'\n#' @export\none_mean_size <- function(mu, mu0, delta = NULL, sd, alpha, beta = NULL, n = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling((sd*(qnorm(1-alpha/2)+qnorm(1-beta))/(mu-mu0))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling((sd*(qnorm(1-alpha)+qnorm(1-beta))/(mu-mu0))^2))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling((sd*(qnorm(1-alpha)+qnorm(1-beta))/(mu-mu0-delta))^2))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling((sd*(qnorm(1-alpha)+qnorm(1-beta/2))/(delta-abs(mu-mu0)))^2))\n    }\n  } else if (!is.null(n)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((mu-mu0)/sd*sqrt(n)-qnorm(1-alpha/2))+pnorm(-(mu-mu0)/sd*sqrt(n)-qnorm(1-alpha/2)))\n    } else if (test_type == \"1-side\") {\n      return(pnorm(abs((mu-mu0)/sd*sqrt(n))-qnorm(1-alpha)))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((mu-mu0-delta)/sd*sqrt(n)-qnorm(1-alpha))+pnorm(-(mu-mu0-delta)/sd*sqrt(n)-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*(pnorm((abs(mu-mu0)-delta)/sd*sqrt(n)-qnorm(1-alpha))+pnorm(-(abs(mu-mu0)-delta)/sd*sqrt(n)-qnorm(1-alpha)))-1)\n    }\n  }\n}\n","type":"text"},{"name":"source/one_norm_size.R","content":"#' Sample Size or Power Calculation for One-Sample Normal Mean Test\n#'\n#' Calculates sample size or power for a two-sample normal mean test.\n#'\n#' @param mu Numeric. True mean.\n#' @param mu0 Numeric. Null hypothesis mean.\n#' @param sd Numeric. Standard deviation.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments:\n#' - For sample size: `\"mu\"`, `\"mu0\"`, `\"sd\"`, `\"alpha\"`, `\"beta\"`\n#' - For power: `\"mu\"`, `\"mu0\"`, `\"sd\"`, `\"alpha\"`, `\"n\"`\n#'\n#' @examples\n#' # Sample size\n#' one_norm_size(mu = 2, mu0 = 1.5, sd = 1,\n#'               alpha = 0.05, beta = 0.2)\n#'\n#' # Power\n#' one_norm_size(mu = 2, mu0 = 1.5, sd = 1,\n#'               alpha = 0.05, n = 32)\n#'\n#' @export\none_norm_size <- function(mu, mu0, sd, alpha, beta = NULL, n = NULL) {\n  if (!is.null(beta)) {\n    return(ceiling((sd*(qnorm(1-alpha/2)+qnorm(1-beta))/(mu-mu0))^2))\n  } else if (!is.null(n)) {\n    return(pnorm((mu-mu0)/sd*sqrt(n)-qnorm(1-alpha/2))+pnorm(-(mu-mu0)/sd*sqrt(n)-qnorm(1-alpha/2)))\n  }\n}\n","type":"text"},{"name":"source/one_prop_size.R","content":"#' Sample Size or Power for One-Sample Proportion Test\n#'\n#' Calculates sample size or power for a one-sample proportion test.\n#'\n#' @param p Numeric. True proportion.\n#' @param p0 Numeric. Null hypothesis proportion.\n#' @param delta Numeric (optional). Margin for `\"non-inferiority\"` or `\"equivalence\"` test. Required for `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#' @param test_type Character. `\"2-side\"`, `\"1-side\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"`/`\"1-side`:\n#'   - For sample size: `p`, `p0`, `alpha`, `beta`\n#'   - For power: `p`, `p0`, `alpha`, `n`\n#'\n#' - `\"non-inferiority\"`/`\"equivalence\"`:\n#'   - For sample size: `p`, `p0`, `delta`, `alpha`, `beta`\n#'   - For power: `p`, `p0`, `sdA`, `delta`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' one_prop_size(p = 0.5, p0 = 0.3,\n#'               alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' one_prop_size(p = 0.5, p0 = 0.3,\n#'               alpha = 0.05, n = 50, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' one_prop_size(p = 0.05, p0 = 0.02,\n#'               alpha = 0.05, beta = 0.2, test_type = \"1-side\")\n#'\n#' # Power of `\"1-sided\"` test\n#' one_prop_size(p = 0.05, p0 = 0.02,\n#'               alpha = 0.05, n = 191, test_type = \"1-side\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' one_prop_size(p = 0.5, p0 = 0.3, delta = -0.1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' one_prop_size(p = 0.5, p0 = 0.3, delta = -0.1,\n#'               alpha = 0.05, n = 18, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' one_prop_size(p = 0.6, p0 = 0.6, delta = 0.2,\n#'               alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' one_prop_size(p = 0.6, p0 = 0.6, delta = 0.2,\n#'               alpha = 0.05, n = 52, test_type = \"equivalence\")\n#'\n#' @export\none_prop_size <- function(p, p0, delta = NULL, alpha, beta = NULL, n = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling(p*(1-p)*((qnorm(1-alpha/2)+qnorm(1-beta))/(p-p0))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling(p0*(1-p0)*((qnorm(1-alpha)+qnorm(1-beta)*sqrt(p*(1-p)/p0/(1-p0)))/(p-p0))^2))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling(p*(1-p)*((qnorm(1-alpha)+qnorm(1-beta))/(p-p0-delta))^2))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling(p*(1-p)*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(p-p0)-delta))^2))\n    }\n  } else if (!is.null(n)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((p-p0)/sqrt(p*(1-p)/n)-qnorm(1-alpha/2))+pnorm(-(p-p0)/sqrt(p*(1-p)/n)-qnorm(1-alpha/2)))\n    } else if (test_type == \"1-side\") {\n      return(pnorm(sqrt(p0*(1-p0)/p/(1-p))*(abs((p-p0)/sqrt(p0*(1-p0)/n))-qnorm(1-alpha))))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((p-p0-delta)/sqrt(p*(1-p)/n)-qnorm(1-alpha))+pnorm(-(p-p0-delta)/sqrt(p*(1-p)/n)-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*(pnorm((abs(p-p0)-delta)/sqrt(p*(1-p)/n)-qnorm(1-alpha))+pnorm(-(abs(p-p0)-delta)/sqrt(p*(1-p)/n)-qnorm(1-alpha)))-1)\n    }\n  }\n}\n","type":"text"},{"name":"source/or_size.R","content":"#' Sample Size or Power for Odds Ratio Test\n#'\n#' Calculates sample size or power for odds ratio test.\n#'\n#' @param pA Numeric. True proportion of group A.\n#' @param pB Numeric. True proportion of group B.\n#' @param delta Numeric (optional). Margin for `\"non-inferiority\"` or `\"equivalence\"` test. Required for `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param kappa Numeric. Ratio of sample sizes (nA/nB). Default is 1.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param nB Integer (optional). Sample size for group B. Required for power calculation.\n#' @param test_type Character. `\"equality\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `nB` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `nB` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"equality\"`:\n#'   - For sample size: `pA`, `pB`, `alpha`, `beta`\n#'   - For power: `pA`, `pB`, `alpha`, `nB`\n#'\n#' - `\"non-inferiority\"`/`\"equivalence\"`:\n#'   - For sample size: `pA`, `pB`, `delta`,  `alpha`, `beta`\n#'   - For power: `pA`, `pB`, `delta`, `alpha`, `nB`\n#'\n#' @examples\n#' # Sample size for `\"equality\"` test\n#' or_size(pA = 0.4, pB = 0.25, kappa = 1,\n#'         alpha = 0.05, beta = 0.2, test_type = \"equality\")\n#'\n#' # Power of `\"equality\"` test\n#' or_size(pA = 0.4, pB = 0.25, kappa = 1,\n#'         alpha = 0.05, nB = 156, test_type = \"equality\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' or_size(pA = 0.4, pB = 0.25, delta = 0.2, kappa = 1,\n#'         alpha = 0.05, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' or_size(pA = 0.4, pB = 0.25, delta = 0.2, kappa = 1,\n#'         alpha = 0.05, nB = 242, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' or_size(pA = 0.25, pB = 0.25, delta = 0.5, kappa = 1,\n#'         alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' or_size(pA = 0.25, pB = 0.25, delta = 0.5, kappa = 1,\n#'         alpha = 0.05, nB = 366, test_type = \"equivalence\")\n#'\n#' @export\nor_size <- function(pA, pB, delta = NULL, kappa = 1, alpha, beta = NULL, nB = NULL, test_type = \"equality\") {\n  if (!is.null(beta)) {\n    if (test_type == \"equality\") {\n      return(ceiling((1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha/2)+qnorm(1-beta))/log(pA*(1-pB)/pB/(1-pA)))^2))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling((1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha)+qnorm(1-beta))/(log(pA*(1-pB)/pB/(1-pA))-delta))^2))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling((1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(log(pA*(1-pB)/pB/(1-pA)))-delta))^2))\n    }\n  } else if (!is.null(nB)) {\n    if (test_type == \"equality\") {\n      return(pnorm(log(pA*(1-pB)/pB/(1-pA))*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha/2))+pnorm(-log(pA*(1-pB)/pB/(1-pA))*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha/2)))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((log(pA*(1-pB)/pB/(1-pA))-delta)*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha))+pnorm(-(log(pA*(1-pB)/pB/(1-pA))-delta)*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*(pnorm((abs(log(pA*(1-pB)/pB/(1-pA)))-delta)*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha))+pnorm(-(abs(log(pA*(1-pB)/pB/(1-pA)))-delta)*sqrt(nB)/sqrt(1/(kappa*pA*(1-pA))+1/(pB*(1-pB)))-qnorm(1-alpha)))-1)\n    }\n  }\n}\n","type":"text"},{"name":"source/pair_prop_size.R","content":"#' Sample Size or Power for Paired-Sample Proportion Test\n#'\n#' Calculates sample size or power for a paired-sample proportion test.\n#'\n#' @param p01 Numeric. Proportion of discordant pairs with (before = 1, after = 0).\n#' @param p10 Numeric. Proportion of discordant pairs with (before = 0, after = 1).\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#' @param test_type Character. `\"2-side\"` or `\"1-side\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments:\n#' - For sample size: `p01`, `p10`, `alpha`, `beta`\n#' - For power: `p01`, `p10`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' pair_prop_size(p01 = 0.45, p10 = 0.05,\n#'                alpha = 0.1, beta = 0.1, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' pair_prop_size(p01 = 0.45, p10 = 0.05,\n#'                alpha = 0.1, n = 23, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' pair_prop_size(p01 = 0.45, p10 = 0.05,\n#'                alpha = 0.05, beta = 0.1, test_type = \"1-side\")\n#'\n#' # Power of `\"1-side\"` test\n#' pair_prop_size(p01 = 0.45, p10 = 0.05,\n#'                alpha = 0.05, n = 23, test_type = \"1-side\")\n#'\n#' @export\npair_prop_size <- function(p01, p10, alpha, beta = NULL, n = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling(((qnorm(1-alpha/2)*sqrt(p10+p01)+qnorm(1-beta)*sqrt(p10+p01-(p10-p01)^2))/(p10-p01))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling(((qnorm(1-alpha)*sqrt(p10+p01)+qnorm(1-beta)*sqrt(p10+p01-(p10-p01)^2))/(p10-p01))^2))\n    }\n  } else if (!is.null(n)) {\n    if (test_type == \"2-side\") {\n      return(pnorm(((p10-p01)*sqrt(n)-qnorm(1-alpha/2)*sqrt(p10+p01))/sqrt(p10+p01-(p10-p01)^2))+pnorm((-(p10-p01)*sqrt(n)-qnorm(1-alpha/2)*sqrt(p10+p01))/sqrt(p10+p01-(p10-p01)^2)))\n    } else if (test_type == \"1-side\") {\n      return(pnorm((abs(p10-p01)*sqrt(n)-qnorm(1-alpha)*sqrt(p10+p01))/sqrt(p10+p01-(p10-p01)^2)))\n    }\n  }\n}\n","type":"text"},{"name":"source/param_ui_coxph_size.R","content":"param_ui_coxph_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"hr\", \"hr\", NULL),\n    numericInput(\"hr0\", \"hr0\", NULL),\n    numericInput(\"pE\", \"pE\", NULL),\n    numericInput(\"pA\", \"pA\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_k_mean_size.R","content":"param_ui_k_mean_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"muA\", \"muA\", NULL),\n    numericInput(\"muB\", \"muB\", NULL),\n    numericInput(\"kappa\", \"kappa\", 1),\n    numericInput(\"tau\", \"tau\", NULL),\n    conditionalPanel(\n      \"input.test_type == '2-side'\",\n      numericInput(\"sd\", \"sd\", NULL)\n    ),\n    conditionalPanel(\n      \"input.test_type == '1-side'\",\n      numericInput(\"sdA\", \"sdA\", NULL),\n      numericInput(\"sdB\", \"sdB\", NULL)\n    ),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power' && input.test_type == '2-side'\",\n      numericInput(\"n\", \"n\", NULL)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power' && input.test_type == '1-side'\",\n      numericInput(\"nA\", \"nA\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_k_prop_size.R","content":"param_ui_k_prop_size <- function() {\n  tagList(\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"pA\", \"pA\", NULL),\n    numericInput(\"pB\", \"pB\", NULL),\n    numericInput(\"tau\", \"tau\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_one_bino_size.R","content":"param_ui_one_bino_size <- function() {\n  tagList(\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"p\", \"p\", NULL),\n    numericInput(\"p0\", \"p0\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_one_mean_size.R","content":"param_ui_one_mean_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"mu\", \"mu\", NULL),\n    numericInput(\"mu0\", \"mu0\", NULL),\n    conditionalPanel(\n      \"input.test_type == 'non-inferiority' || input.test_type == 'equivalence'\",\n      numericInput(\"delta\", \"delta\", NULL)\n    ),\n    numericInput(\"sd\", \"sd\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_one_norm_size.R","content":"param_ui_one_norm_size <- function() {\n  tagList(\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"mu\", \"mu\", NULL),\n    numericInput(\"mu0\", \"mu0\", NULL),\n    numericInput(\"sd\", \"sd\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_one_prop_size.R","content":"param_ui_one_prop_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"p\", \"p\", NULL),\n    numericInput(\"p0\", \"p0\", NULL),\n    conditionalPanel(\n      \"input.test_type == 'non-inferiority' || input.test_type == 'equivalence'\",\n      numericInput(\"delta\", \"delta\", NULL)\n    ),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_or_size.R","content":"param_ui_or_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"Equality\" = \"equality\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"pA\", \"pA\", NULL),\n    numericInput(\"pB\", \"pB\", NULL),\n    conditionalPanel(\n      \"input.test_type == 'non-inferiority' || input.test_type == 'equivalence'\",\n      numericInput(\"delta\", \"delta\", NULL)\n    ),\n    numericInput(\"kappa\", \"Kappa\", 1),\n    conditionalPanel(\n      \"input.test_type != '1-side'\",\n      numericInput(\"sd\", \"sd\", NULL)\n    ),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"nB\", \"nB\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_pair_prop_size.R","content":"param_ui_pair_prop_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"p01\", \"p01\", NULL),\n    numericInput(\"p10\", \"p10\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    ),\n  )\n}\n","type":"text"},{"name":"source/param_ui_sccs_size.R","content":"param_ui_sccs_size <- function() {\n  tagList(\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"p\", \"p\", NULL),\n    numericInput(\"r\", \"r\", NULL),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"n\", \"n\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_two_mean_size.R","content":"param_ui_two_mean_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"muA\", \"muA\", NULL),\n    numericInput(\"muB\", \"muB\", NULL),\n    conditionalPanel(\n      \"input.test_type == 'non-inferiority' || input.test_type == 'equivalence'\",\n      numericInput(\"delta\", \"delta\", NULL)\n    ),\n    numericInput(\"kappa\", \"Kappa\", 1),\n    conditionalPanel(\n      \"input.test_type != '1-side'\",\n      numericInput(\"sd\", \"sd\", NULL)\n    ),\n    conditionalPanel(\n      \"input.test_type == '1-side'\",\n      numericInput(\"sdA\", \"sdA\", NULL),\n      numericInput(\"sdB\", \"sdB\", NULL)\n    ),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power' && input.test_type == '1-side'\",\n      numericInput(\"nA\", \"nA\", NULL)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power' && input.test_type != '1-side'\",\n      numericInput(\"nB\", \"nB\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/param_ui_two_prop_size.R","content":"param_ui_two_prop_size <- function() {\n  tagList(\n    selectInput(\"test_type\", \"Test Type\", choices = c(\n      \"2-sided\" = \"2-side\",\n      \"1-sided\" = \"1-side\",\n      \"Non-inferiority\" = \"non-inferiority\",\n      \"Equivalence\" = \"equivalence\"\n    )),\n    radioButtons(\"mode\", \"Calculate\", choices = c(\"Sample Size\" = \"size\", \"Power\" = \"power\")),\n    numericInput(\"pA\", \"pA\", NULL),\n    numericInput(\"pB\", \"pB\", NULL),\n    conditionalPanel(\n      \"input.test_type == 'non-inferiority' || input.test_type == 'equivalence'\",\n      numericInput(\"delta\", \"delta\", NULL)\n    ),\n    numericInput(\"kappa\", \"Kappa\", 1),\n    numericInput(\"alpha\", \"alpha\", 0.05),\n    conditionalPanel(\n      \"input.mode == 'size'\",\n      numericInput(\"beta\", \"beta\", 0.2)\n    ),\n    conditionalPanel(\n      \"input.mode == 'power'\",\n      numericInput(\"nB\", \"nB\", NULL)\n    )\n  )\n}\n","type":"text"},{"name":"source/result_coxph_size.R","content":"result_coxph_size <- function(input) {\n  if (input$mode == \"size\") {\n    coxph_size(\n      hr = input$hr,\n      hr0 = input$hr0,\n      pE = input$pE,\n      pA = input$pA,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    coxph_size(\n      hr = input$hr,\n      hr0 = input$hr0,\n      pE = input$pE,\n      pA = input$pA,\n      alpha = input$alpha,\n      n = input$n,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_k_mean_size.R","content":"result_k_mean_size <- function(input) {\n  if (input$mode == \"size\") {\n    k_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      tau = input$tau,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else if (input$test_type == \"1-side\") {\n    k_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      tau = input$tau,\n      alpha = input$alpha,\n      nA = input$nA,\n      test_type = input$test_type\n    )\n  } else {\n    k_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      tau = input$tau,\n      alpha = input$alpha,\n      n = input$n,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_k_prop_size.R","content":"result_k_prop_size <- function(input) {\n  if (input$mode == \"size\") {\n    k_prop_size(\n      pA = input$pA,\n      pB = input$pB,\n      tau = input$tau,\n      alpha = input$alpha,\n      beta = input$beta\n    )\n  } else {\n    k_prop_size(\n      pA = input$pA,\n      pB = input$pB,\n      tau = input$tau,\n      alpha = input$alpha,\n      n = input$n\n    )\n  }\n}\n","type":"text"},{"name":"source/result_one_bino_size.R","content":"result_one_bino_size <- function(input) {\n  if (input$mode == \"size\") {\n    one_bino_size(\n      p = input$p,\n      p0 = input$p0,\n      alpha = input$alpha,\n      beta = input$beta\n    )\n  } else {\n    one_bino_size(\n      p = input$p,\n      p0 = input$p0,\n      alpha = input$alpha,\n      n = input$n\n    )\n  }\n}\n","type":"text"},{"name":"source/result_one_mean_size.R","content":"result_one_mean_size <- function(input) {\n  if (input$mode == \"size\") {\n    one_mean_size(\n      mu = input$mu,\n      mu0 = input$mu0,\n      delta = input$delta,\n      sd = input$sd,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    one_mean_size(\n      mu = input$mu,\n      mu0 = input$mu0,\n      delta = input$delta,\n      sd = input$sd,\n      alpha = input$alpha,\n      n = input$n,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_one_norm_size.R","content":"result_one_norm_size <- function(input) {\n  if (input$mode == \"size\") {\n    one_norm_size(\n      mu = input$mu,\n      mu0 = input$mu0,\n      sd = input$sd,\n      alpha = input$alpha,\n      beta = input$beta\n    )\n  } else {\n    one_norm_size(\n      mu = input$mu,\n      mu0 = input$mu0,\n      sd = input$sd,\n      alpha = input$alpha,\n      n = input$n\n    )\n  }\n}\n","type":"text"},{"name":"source/result_one_prop_size.R","content":"result_one_prop_size <- function(input) {\n  if (input$mode == \"size\") {\n    one_prop_size(\n      p = input$p,\n      p0 = input$p0,\n      delta = input$delta,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    one_prop_size(\n      p = input$p,\n      p0 = input$p0,\n      delta = input$delta,\n      alpha = input$alpha,\n      n = input$n,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_or_size.R","content":"result_or_size <- function(input) {\n  if (input$mode == \"size\") {\n    or_size(\n      pA = input$pA,\n      pB = input$pB,\n      delta = input$delta,\n      kappa = input$kappa,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    or_size(\n      pA = input$pA,\n      pB = input$pB,\n      delta = input$delta,\n      kappa = input$kappa,\n      alpha = input$alpha,\n      nB = input$nB,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_pair_prop_size.R","content":"result_pair_prop_size <- function(input) {\n  if (input$mode == \"size\") {\n    pair_prop_size(\n      p01 = input$p01,\n      p10 = input$p10,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    pair_prop_size(\n      p01 = input$p01,\n      p10 = input$p10,\n      alpha = input$alpha,\n      n = input$n,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_sccs_size.R","content":"result_sccs_size <- function(input) {\n  if (input$mode == \"size\") {\n    sccs_size(\n      p = input$p,\n      r = input$r,\n      alpha = input$alpha,\n      beta = input$beta\n    )\n  } else {\n    sccs_size(\n      p = input$p,\n      r = input$r,\n      alpha = input$alpha,\n      n = input$n\n    )\n  }\n}\n","type":"text"},{"name":"source/result_two_mean_size.R","content":"result_two_mean_size <- function(input) {\n  if (input$mode == \"size\") {\n    two_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      delta = input$delta,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else if (input$test_type == \"1-side\") {\n    two_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      delta = input$delta,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      alpha = input$alpha,\n      nA = input$nA,\n      test_type = input$test_type\n    )\n  } else {\n    two_mean_size(\n      muA = input$muA,\n      muB = input$muB,\n      delta = input$delta,\n      kappa = input$kappa,\n      sd = input$sd,\n      sdA = input$sdA,\n      sdB = input$sdB,\n      alpha = input$alpha,\n      nB = input$nB,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/result_two_prop_size.R","content":"result_two_prop_size <- function(input) {\n  if (input$mode == \"size\") {\n    two_prop_size(\n      pA = input$pA,\n      pB = input$pB,\n      delta = input$delta,\n      kappa = input$kappa,\n      alpha = input$alpha,\n      beta = input$beta,\n      test_type = input$test_type\n    )\n  } else {\n    two_prop_size(\n      pA = input$pA,\n      pB = input$pB,\n      delta = input$delta,\n      kappa = input$kappa,\n      alpha = input$alpha,\n      nB = input$nB,\n      test_type = input$test_type\n    )\n  }\n}\n","type":"text"},{"name":"source/sccs_size.R","content":"#' Sample Size or Power for Self-Controlled Case Series (SCCS)\n#'\n#' Calculates sample size or power for self-controlled case series studies.\n#'\n#' @param p Numeric. True relative incidence (risk period vs baseline).\n#' @param r Numeric. Proportion of observation time that is risk period.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param n Integer (optional). Sample size. Required for power calculation.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `n` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `n` (for power calculation) should be specified.\n#'\n#' Required arguments:\n#' - For sample size: `p`, `r`, `alpha`, `beta`\n#' - For power: `p`, `r`, `alpha`, `n`\n#'\n#' @examples\n#' # Sample size\n#' sccs_size(p = 3, r = 42/365,\n#'           alpha = 0.05, beta = 0.2)\n#'\n#' # Power\n#' sccs_size(p = 3, r = 42/365,\n#'           alpha = 0.05, n = 54)\n#'\n#' @export\nsccs_size <- function(p, r, alpha, beta = NULL, n = NULL) {\n  if (!is.null(beta)) {\n    return(ceiling((qnorm(1-alpha/2)+qnorm(1-beta)*(p*r+1-r)/sqrt(p))^2/(r*(1-r)*log(p)^2)))\n  } else if (!is.null(n)) {\n    return(pnorm((log(p)*sqrt(n*p*r*(1-r))-qnorm(1-alpha/2)*sqrt(p))/(p*r+1-r)))\n  }\n}\n","type":"text"},{"name":"source/two_mean_size.R","content":"#' Sample Size or Power for Two-Sample Mean Test\n#'\n#' Calculates sample size or power for a two-sample mean test.\n#'\n#' @param muA Numeric. True mean of group A.\n#' @param muB Numeric. True mean of group B.\n#' @param delta Numeric (optional). Margin for `\"non-inferiority\"` or `\"equivalence test\"`. Required for `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param kappa Numeric. Ratio of sample sizes (nA/nB). Default is 1.\n#' @param sd Numeric (optional). Standard deviation. Required for `\"2-side\"`, `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param sdA Numeric (optional). Standard deviation of group A. Required for `\"1-side\"` test.\n#' @param sdB Numeric (optional). Standard deviation of group B. Required for `\"1-side\"` test.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param nA Integer (optional). Sample size for group A. Required for power calculation of `\"1-side\"` test.\n#' @param nB Integer (optional). Sample size for group B. Required for power calculation of `\"2-side\"`, `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param test_type Character. `\"2-side\"`, `\"1-side\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `nA`/`nB` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `nA`/`nB` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"`:\n#'   - For sample size: `muA`, `muB`, `sd`, `alpha`, `beta`\n#'   - For power: `muA`, `muB`, `sd`, `alpha`, `nB`\n#'\n#' - `\"1-side\"`:\n#'   - For sample size: `muA`, `muB`, `sdA`, `sdB`, `alpha`, `beta`\n#'   - For power: `muA`, `muB`, `sdA`, `sdB`, `alpha`, `nA`\n#'\n#' - `\"non-inferiority\"`/`\"equivalence\"`:\n#'   - For sample size: `muA`, `muB`, `delta`, `sd`, `alpha`, `beta`\n#'   - For power: `muA`, `muB`, `delta`, `sd`, `alpha`, `nB`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' two_mean_size(muA = 5, muB = 10, kappa = 1, sd = 10,\n#'               alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' two_mean_size(muA = 5, muB = 10, kappa = 1, sd = 10,\n#'               alpha = 0.05, nB = 63, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' two_mean_size(muA = 132.86, muB = 127.44, kappa = 2, sdA = 15.34, sdB = 18.23,\n#'               alpha = 0.05, beta = 0.2, test_type = \"1-side\")\n#'\n#' # Power of `\"1-sided\"` test\n#' two_mean_size(muA = 132.86, muB = 127.44, kappa = 2, sdA = 15.34, sdB = 18.23,\n#'               alpha = 0.05, nA = 85, test_type = \"1-side\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' two_mean_size(muA = 5, muB = 5, delta = 5, kappa = 1, sd = 10,\n#'               alpha = 0.05, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' two_mean_size(muA = 5, muB = 5, delta = 5, kappa = 1, sd = 10,\n#'               alpha = 0.05, nB = 50, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' two_mean_size(muA = 5, muB = 4, delta = 5, kappa = 1, sd = 10,\n#'               alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' two_mean_size(muA = 5, muB = 4, delta = 5, kappa = 1, sd = 10,\n#'               alpha = 0.05, nB = 108, test_type = \"equivalence\")\n#'\n#' @export\ntwo_mean_size <- function(muA, muB, delta = NULL, kappa = 1, sd = NULL, sdA = NULL, sdB = NULL, alpha, beta = NULL, nA = NULL, nB = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling((1+1/kappa)*(sd*(qnorm(1-alpha/2)+qnorm(1-beta))/(muA-muB))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling((sdA^2+sdB^2/kappa)*((qnorm(1-alpha)+qnorm(1-beta))/(muA-muB))^2))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling((1+1/kappa)*(sd*(qnorm(1-alpha)+qnorm(1-beta))/(muA-muB-delta))^2))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling((1+1/kappa)*(sd*(qnorm(1-alpha)+qnorm(1-beta/2))/(abs(muA-muB)-delta))^2))\n    }\n  } else if (!is.null(nA)) {\n    if (test_type == \"1-side\") {\n      return(pnorm((muA-muB)/sqrt(sdA^2+sdB^2/kappa)*sqrt(nA)-qnorm(1-alpha)))\n    }\n  } else if (!is.null(nB)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((muA-muB)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha/2))+pnorm(-(muA-muB)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha/2)))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((muA-muB-delta)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha))+pnorm(-(muA-muB-delta)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*(pnorm((abs(muA-muB)-delta)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha))+pnorm(-(abs(muA-muB)-delta)/(sd*sqrt((1+1/kappa)/nB))-qnorm(1-alpha)))-1)\n    }\n  }\n}\n","type":"text"},{"name":"source/two_prop_size.R","content":"#' Sample Size or Power for Two-Sample Proportion Test\n#'\n#' Calculates sample size or power for a two-sample proportion test.\n#'\n#' @param pA Numeric. True proportion of group A.\n#' @param pB Numeric. True proportion of group B.\n#' @param delta Numeric (optional). Margin for `\"non-inferiority\"` or `\"equivalence\"` test. Required for `\"non-inferiority\"` or `\"equivalence\"` test.\n#' @param kappa Numeric. Ratio of sample sizes (nA/nB). Default is 1.\n#' @param alpha Numeric. Type I error rate.\n#' @param beta Numeric (optional). Type II error rate. Required for sample size calculation.\n#' @param nB Integer (optional). Sample size for group B. Required for power calculation.\n#' @param test_type Character. `\"2-side\"`, `\"1-side\"`, `\"non-inferiority\"`, or `\"equivalence\"`. Default is `\"2-side\"`.\n#'\n#' @return Numeric. Returns sample size (if `beta` is given), or power (if `nB` is given).\n#'\n#' @note\n#' Only one of `beta` (for sample size calculation) or `nA`/`nB` (for power calculation) should be specified.\n#'\n#' Required arguments by `test_type`:\n#' - `\"2-side\"`/`\"1-side\"`:\n#'   - For sample size: `pA`, `pB`, `alpha`, `beta`\n#'   - For power: `pA`, `pB`, `alpha`, `nB`\n#'\n#' - `\"non-inferiority\"`/`\"equivalence\"`:\n#'   - For sample size: `pA`, `pB`, `delta`,  `alpha`, `beta`\n#'   - For power: `pA`, `pB`, `delta`, `alpha`, `nB`\n#'\n#' @examples\n#' # Sample size for `\"2-side\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, kappa = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"2-side\")\n#'\n#' # Power of `\"2-side\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, kappa = 1,\n#'               alpha = 0.05, nB = 70, test_type = \"2-side\")\n#'\n#' # Sample size for `\"1-side\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, kappa = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"1-side\")\n#'\n#' # Power of `\"1-sided\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, kappa = 1,\n#'               alpha = 0.05, nB = 55, test_type = \"1-side\")\n#'\n#' # Sample size for `\"non-inferiority\"` test\n#' two_prop_size(pA = 0.85, pB = 0.65, delta = -0.1, kappa = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"non-inferiority\")\n#'\n#' # Power of `\"non-inferiority\"` test\n#' two_prop_size(pA = 0.85, pB = 0.65, delta = -0.1, kappa = 1,\n#'               alpha = 0.05, nB = 25, test_type = \"non-inferiority\")\n#'\n#' # Sample size for `\"equivalence\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, delta = 0.05, kappa = 1,\n#'               alpha = 0.05, beta = 0.2, test_type = \"equivalence\")\n#'\n#' # Power of `\"equivalence\"` test\n#' two_prop_size(pA = 0.65, pB = 0.85, delta = 0.05, kappa = 1,\n#'               alpha = 0.05, nB = 136, test_type = \"equivalence\")\n#'\n#' @export\ntwo_prop_size <- function(pA, pB, delta = NULL, kappa = 1, alpha, beta = NULL, nB = NULL, test_type = \"2-side\") {\n  if (!is.null(beta)) {\n    if (test_type == \"2-side\") {\n      return(ceiling((pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha/2)+qnorm(1-beta))/(pA-pB))^2))\n    } else if (test_type == \"1-side\") {\n      return(ceiling((pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta))/(pA-pB))^2))\n    } else if (test_type == \"non-inferiority\") {\n      return(ceiling((pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta))/(pA-pB-delta))^2))\n    } else if (test_type == \"equivalence\") {\n      return(ceiling((pA*(1-pA)/kappa+pB*(1-pB))*((qnorm(1-alpha)+qnorm(1-beta/2))/(abs(pA-pB)-delta))^2))\n    }\n  } else if (!is.null(nB)) {\n    if (test_type == \"2-side\") {\n      return(pnorm((pA-pB)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha/2))+pnorm(-(pA-pB)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha/2)))\n    } else if (test_type == \"1-side\") {\n      return(pnorm(abs((pA-pB)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB))-qnorm(1-alpha)))\n    } else if (test_type == \"non-inferiority\") {\n      return(pnorm((pA-pB-delta)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha))+pnorm(-(pA-pB-delta)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha)))\n    } else if (test_type == \"equivalence\") {\n      return(2*(pnorm((abs(pA-pB)-delta)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha))+pnorm(-(abs(pA-pB)-delta)/sqrt(pA*(1-pA)/nB/kappa+pB*(1-pB)/nB)-qnorm(1-alpha)))-1)\n    }\n  }\n}\n","type":"text"}]
